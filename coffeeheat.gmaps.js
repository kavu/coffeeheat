// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  (function(w) {
    var HeatmapOverlay;
    HeatmapOverlay = (function(_super) {

      __extends(HeatmapOverlay, _super);

      function HeatmapOverlay(map, cfg) {
        var _this = this;
        this.heatmap = null;
        this.conf = cfg;
        this.latlngs = [];
        this.bounds = null;
        this.setMap(map);
        google.maps.event.addListenerOnce(map, "idle", function() {
          return _this.draw();
        });
      }

      HeatmapOverlay.prototype.onAdd = function() {
        var el, map_div;
        map_div = this.getMap().getDiv();
        el = document.createElement("div");
        el.style.position = "absolute";
        el.style.top = el.style.border = el.style.left = 0;
        el.style.width = map_div.clientWidth + "px";
        el.style.height = map_div.clientHeight + "px";
        this.getPanes().overlayLayer.appendChild(el);
        this.conf.element = el;
        return this.heatmap = heatmapFactory.create(this.conf);
      };

      HeatmapOverlay.prototype.toggle = function() {
        return this.heatmap.toggleDisplay();
      };

      HeatmapOverlay.prototype.draw = function() {
        var currentBounds, d, divPixel, latlng, leftX, len, ne, overlayProjection, projection, roundedPoint, screenPixel, sw, topY;
        overlayProjection = this.getProjection();
        currentBounds = this.map.getBounds();
        if (currentBounds.equals(this.bounds)) {
          return;
        }
        this.bounds = currentBounds;
        ne = overlayProjection.fromLatLngToDivPixel(currentBounds.getNorthEast());
        sw = overlayProjection.fromLatLngToDivPixel(currentBounds.getSouthWest());
        topY = ne.y;
        leftX = sw.x;
        this.conf.element.style.left = leftX + 'px';
        this.conf.element.style.top = topY + 'px';
        this.conf.element.style.width = ne.x - sw.x + 'px';
        this.conf.element.style.height = sw.y - ne.y + 'px';
        this.heatmap.store.get("heatmap").resize();
        if (this.latlngs.length > 0) {
          this.heatmap.clear();
          len = this.latlngs.length;
          projection = this.getProjection();
          d = {
            max: this.heatmap.store.max,
            data: []
          };
          while (len--) {
            latlng = this.latlngs[len].latlng;
            if (!currentBounds.contains(latlng)) {
              continue;
            }
            divPixel = projection.fromLatLngToDivPixel(latlng);
            screenPixel = new google.maps.Point(divPixel.x - leftX, divPixel.y - topY);
            roundedPoint = this.pixelTransform(screenPixel);
            d.data.push({
              x: roundedPoint.x,
              y: roundedPoint.y,
              count: this.latlngs[len].c
            });
          }
          return this.heatmap.store.setDataSet(d);
        }
      };

      HeatmapOverlay.prototype.pixelTransform = function(p) {
        var h;
        w = this.heatmap.get("width");
        h = this.heatmap.get("height");
        while (p.x < 0) {
          p.x += w;
        }
        while (p.x > w) {
          p.x -= w;
        }
        while (p.y < 0) {
          p.y += h;
        }
        while (p.y > h) {
          p.y -= h;
        }
        p.x = p.x >> 0;
        p.y = p.y >> 0;
        return p;
      };

      HeatmapOverlay.prototype.setDataSet = function(data) {
        var d, dlen, latlng, mapdata, point, projection;
        d = data.data;
        dlen = d.length;
        projection = this.getProjection();
        this.latlngs = [];
        mapdata = {
          max: data.max,
          data: []
        };
        while (dlen--) {
          latlng = new google.maps.LatLng(d[dlen].lat, d[dlen].lng);
          this.latlngs.push({
            latlng: latlng,
            c: d[dlen].count
          });
          point = this.pixelTransform(projection.fromLatLngToDivPixel(latlng));
          mapdata.data.push({
            x: point.x,
            y: point.y,
            count: d[dlen].count
          });
        }
        this.heatmap.clear();
        return this.heatmap.store.setDataSet(mapdata);
      };

      HeatmapOverlay.prototype.addDataPoint = function(lat, lng, count) {
        var latlng, point, projection;
        projection = this.getProjection();
        latlng = new google.maps.LatLng(lat, lng);
        point = this.pixelTransform(projection.fromLatLngToDivPixel(latlng));
        this.heatmap.store.addDataPoint(point.x, point.y, count);
        return this.latlngs.push({
          latlng: latlng,
          c: count
        });
      };

      return HeatmapOverlay;

    })(google.maps.OverlayView);
    return w.HeatmapOverlay = HeatmapOverlay;
  })(window);

}).call(this);
