// Generated by CoffeeScript 1.3.3
(function() {

  (function(w) {
    var heatmapFactory;
    heatmapFactory = (function() {
      var Heatmap, Store;
      Store = (function() {

        function Store(hmap) {
          var _;
          this.max = 1;
          _ = {
            data: [],
            heatmap: hmap
          };
          this.get = function(key) {
            return _[key];
          };
          this.set = function(key, value) {
            _[key] = value;
          };
        }

        Store.prototype.addDataPoint = function(x, y) {
          var data, heatmap, one, two;
          if (x < 0 || y < 0) {
            return;
          }
          heatmap = this.get("heatmap");
          data = this.get("data");
          if (!data[x]) {
            data[x] = [];
          }
          if (!data[x][y]) {
            data[x][y] = 0;
          }
          data[x][y] += (arguments.length < 3 ? 1 : arguments[2]);
          this.set("data", data);
          if (this.max < data[x][y]) {
            this.max = data[x][y];
            heatmap.get("actx").clearRect(0, 0, heatmap.get("width"), heatmap.get("height"));
            for (one in data) {
              for (two in data[one]) {
                heatmap.drawAlpha(one, two, data[one][two]);
              }
            }
            return;
          }
          heatmap.drawAlpha(x, y, data[x][y]);
        };

        Store.prototype.setDataSet = function(obj) {
          var d, data, dlen, heatmap, point;
          heatmap = this.get("heatmap");
          data = [];
          d = obj.data;
          dlen = d.length;
          heatmap.clear();
          this.max = obj.max;
          while (dlen--) {
            point = d[dlen];
            heatmap.drawAlpha(point.x, point.y, point.count);
            if (!data[point.x]) {
              data[point.x] = [];
            }
            if (!data[point.x][point.y]) {
              data[point.x][point.y] = 0;
            }
            data[point.x][point.y] = point.count;
          }
          this.set("data", data);
        };

        Store.prototype.exportDataSet = function() {
          var data, exportData, one, two;
          data = this.get("data");
          exportData = [];
          for (one in data) {
            if (one === 'undefined') {
              continue;
            }
            for (two in data[one]) {
              if (two === 'undefined') {
                continue;
              }
              exportData.push({
                x: parseInt(one, 10),
                y: parseInt(two, 10),
                count: data[one][two]
              });
            }
          }
          return {
            max: this.max,
            data: exportData
          };
        };

        Store.prototype.generateRandomDataSet = function(points) {
          var data, heatmap, max;
          heatmap = this.get("heatmap");
          max = Math.floor(Math.random() * 1000 + 1);
          data = [];
          while (points--) {
            data.push({
              x: Math.floor(Math.random() * heatmap.get("width") + 1),
              y: Math.floor(Math.random() * heatmap.get("height") + 1),
              count: Math.floor(Math.random() * max + 1)
            });
          }
          this.setDataSet({
            max: max,
            data: data
          });
        };

        return Store;

      })();
      Heatmap = (function() {

        function Heatmap(config) {
          var _;
          _ = {
            radiusIn: 20,
            radiusOut: 40,
            element: {},
            canvas: {},
            acanvas: {},
            ctx: {},
            actx: {},
            visible: true,
            width: 0,
            height: 0,
            max: false,
            gradient: false,
            opacity: 180,
            premultiplyAlpha: false,
            debug: false
          };
          this.store = new Store(this);
          this.get = function(key) {
            return _[key];
          };
          this.set = function(key, value) {
            _[key] = value;
          };
          this.configure(config);
          this.init();
        }

        Heatmap.prototype.configure = function(config) {
          var rin, rout;
          if (config.radius) {
            rout = config.radius;
            rin = parseInt(rout / 4, 10);
          }
          this.set("radiusIn", rin || 15);
          this.set("radiusOut", rout || 40);
          this.set("element", (config.element instanceof Object ? config.element : document.getElementById(config.element)));
          this.set("visible", config.visible);
          this.set("max", config.max || false);
          this.set("gradient", config.gradient || {
            0.45: "rgb(0,0,255)",
            0.55: "rgb(0,255,255)",
            0.65: "rgb(0,255,0)",
            0.95: "yellow",
            1.0: "rgb(255,0,0)"
          });
          this.set("opacity", parseInt(255 / (100 / config.opacity), 10) || 180);
          this.set("width", config.width || 0);
          this.set("height", config.height || 0);
          this.set("debug", config.debug);
        };

        Heatmap.prototype.resize = function() {
          var acanvas, canvas, element;
          element = this.get("element");
          canvas = this.get("canvas");
          acanvas = this.get("acanvas");
          canvas.width = acanvas.width = element.style.width.replace(/px/, "") || this.getWidth(element);
          this.set("width", canvas.width);
          canvas.height = acanvas.height = element.style.height.replace(/px/, "") || this.getHeight(element);
          this.set("height", canvas.height);
        };

        Heatmap.prototype.init = function() {
          var acanvas, canvas, element;
          canvas = document.createElement("canvas");
          acanvas = document.createElement("canvas");
          element = this.get("element");
          this.initColorPalette();
          this.set("canvas", canvas);
          this.set("acanvas", acanvas);
          this.resize();
          canvas.style.position = acanvas.style.position = "absolute";
          canvas.style.top = acanvas.style.top = "0";
          canvas.style.left = acanvas.style.left = "0";
          canvas.style.zIndex = 1000000;
          if (!this.get("visible")) {
            canvas.style.display = "none";
          }
          this.get("element").appendChild(canvas);
          if (this.get("debug")) {
            document.body.appendChild(acanvas);
          }
          this.set("ctx", canvas.getContext("2d"));
          this.set("actx", acanvas.getContext("2d"));
        };

        Heatmap.prototype.initColorPalette = function() {
          var canvas, ctx, grad, gradient, testData, x;
          canvas = document.createElement("canvas");
          gradient = this.get("gradient");
          canvas.width = "1";
          canvas.height = "256";
          ctx = canvas.getContext("2d");
          grad = ctx.createLinearGradient(0, 0, 1, 256);
          testData = ctx.getImageData(0, 0, 1, 1);
          testData.data[0] = testData.data[3] = 64;
          testData.data[1] = testData.data[2] = 0;
          ctx.putImageData(testData, 0, 0);
          testData = ctx.getImageData(0, 0, 1, 1);
          this.set("premultiplyAlpha", testData.data[0] < 60 || testData.data[0] > 70);
          for (x in gradient) {
            grad.addColorStop(x, gradient[x]);
          }
          ctx.fillStyle = grad;
          ctx.fillRect(0, 0, 1, 256);
          this.set("gradient", ctx.getImageData(0, 0, 1, 256).data);
        };

        Heatmap.prototype.getWidth = function(element) {
          var width;
          width = element.offsetWidth;
          if (element.style.paddingLeft) {
            width += element.style.paddingLeft;
          }
          if (element.style.paddingRight) {
            width += element.style.paddingRight;
          }
          return width;
        };

        Heatmap.prototype.getHeight = function(element) {
          var height;
          height = element.offsetHeight;
          if (element.style.paddingTop) {
            height += element.style.paddingTop;
          }
          if (element.style.paddingBottom) {
            height += element.style.paddingBottom;
          }
          return height;
        };

        Heatmap.prototype.colorize = function(x, y) {
          var actx, alpha, ctx, finalAlpha, height, i, image, imageData, length, offset, opacity, palette, premultiplyAlpha, radiusOut, width, x2;
          width = this.get("width");
          radiusOut = this.get("radiusOut");
          height = this.get("height");
          actx = this.get("actx");
          ctx = this.get("ctx");
          x2 = radiusOut * 4;
          premultiplyAlpha = this.get("premultiplyAlpha");
          palette = this.get("gradient");
          opacity = this.get("opacity");
          if (x + x2 > width) {
            x = width - x2;
          }
          if (x < 0) {
            x = 0;
          }
          if (y < 0) {
            y = 0;
          }
          if (y + x2 > height) {
            y = height - x2;
          }
          image = actx.getImageData(x, y, x2, x2);
          imageData = image.data;
          length = imageData.length;
          i = 3;
          while (i < length) {
            alpha = imageData[i];
            offset = alpha * 4;
            if (offset == null) {
              continue;
            }
            finalAlpha = (alpha < opacity ? alpha : opacity);
            imageData[i - 3] = palette[offset];
            imageData[i - 2] = palette[offset + 1];
            imageData[i - 1] = palette[offset + 2];
            if (premultiplyAlpha) {
              imageData[i - 3] /= 255 / finalAlpha;
              imageData[i - 2] /= 255 / finalAlpha;
              imageData[i - 1] /= 255 / finalAlpha;
            }
            imageData[i] = finalAlpha;
            i += 4;
          }
          image.data = imageData;
          ctx.putImageData(image, x, y);
        };

        Heatmap.prototype.drawAlpha = function(x, y, count) {
          var ctx, r2;
          r2 = this.get("radiusOut");
          ctx = this.get("actx");
          ctx.shadowOffsetX = 1000;
          ctx.shadowOffsetY = 1000;
          ctx.shadowBlur = 15;
          ctx.shadowColor = "rgba(0,0,0," + (count ? count / this.store.max : "0.1") + ")";
          ctx.fillStyle = "rgba(0,0,0,1)";
          ctx.beginPath();
          ctx.arc(x - 1000, y - 1000, r2, 0, Math.PI * 2, true);
          ctx.closePath();
          ctx.fill();
          this.colorize(x - 2 * r2, y - 2 * r2);
        };

        Heatmap.prototype.toggleDisplay = function() {
          var canvas, visible;
          visible = this.get("visible");
          canvas = this.get("canvas");
          if (!visible) {
            canvas.style.display = "block";
          } else {
            canvas.style.display = "none";
          }
          this.set("visible", !visible);
        };

        Heatmap.prototype.getImageData = function() {
          return this.get("canvas").toDataURL();
        };

        Heatmap.prototype.clear = function() {
          var h;
          w = this.get("width");
          h = this.get("height");
          this.store.set("data", []);
          this.get("ctx").clearRect(0, 0, w, h);
          this.get("actx").clearRect(0, 0, w, h);
        };

        Heatmap.prototype.cleanup = function() {
          this.get("element").removeChild(this.get("canvas"));
        };

        return Heatmap;

      })();
      return {
        create: function(config) {
          return new Heatmap(config);
        },
        util: {
          mousePosition: function(ev) {
            var x, y;
            if (ev.layerX) {
              x = ev.layerX;
              y = ev.layerY;
            } else if (ev.offsetX) {
              x = ev.offsetX;
              y = ev.offsetY;
            }
            if (x != null) {
              return [x, y];
            }
          }
        }
      };
    })();
    return w.h337 = w.heatmapFactory = heatmapFactory;
  })(window);

}).call(this);
